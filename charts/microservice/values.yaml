#################################
## @section Kubernetes Parameters
#################################
## @descriptionStart This section contains parameters common to most of the Helm Charts in the wild
## Pod Spec, Service, Ingress, Persistence etc.
## @descriptionEnd

## @param replicaCount Number of replicas to deploy
replicaCount: 1

image:
  ## @param image.repository Image repository
  repository: microservice
  ## @param image.tag Image tag. Overrides the image tag whose default is the chart appVersion. (default to "master" before first release)
  tag: "latest"
  ## @param image.pullPolicy Specify a imagePullPolicy
  pullPolicy: IfNotPresent
  ## @param image.pullSecrets Specify docker-registry secret names as an array
  pullSecrets: []

## @param nameOverride String to be used in labels
nameOverride: ""
## @param fullnameOverride String to be used as the base of most resource names
fullnameOverride: ""

serviceAccount:
  ## @param serviceAccount.create Create a ServiceAccount
  create: false
  ## @param serviceAccount.annotations Annotations to add to the service account
  annotations: {}
  ## @param serviceAccount.name The name of the service account to use.
  name: ""

## @param podAnnotations Annotations of microservice pod
podAnnotations: {}

## Security Context of microservice pod
podSecurityContext:
  ## @skip podSecurityContext.runAsNonRoot
  runAsNonRoot: true
  ## @skip podSecurityContext.runAsUser
  runAsUser: 1001
  ## @skip podSecurityContext.fsGroup
  fsGroup: 1001

## @param securityContext Security Context of microservice container
securityContext: {}

service:
  ## @param service.type type of service
  type: ClusterIP
  # @default -- See [`values.yaml`](values.yaml)
  ## @param service.ports key value of ports. Valid keys are http, grpc, websocket & healthcheck
  ports:
    ## @skip service.ports.http
    ## @skip service.ports.grpc
    ## @skip service.ports.websocket
    ## @skip service.ports.healthcheck
    # http: 80
    # grpc: 8080
    # websocket: 8081
    # healthcheck: 8888

ingress:
  ## @param ingress.enabled Enable ingress
  enabled: false
  ## @param ingress.annotations annotations of ingress
  annotations: {}
  ## @param ingress.hosts hosts of ingress
  hosts: []
    # - host: chart-example.local
    #   paths:
    #     # backend.service.name and backend.service.port.name are optional
    #     # mainly used for aws alb ingress controller
    #     # https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/guide/ingress/annotations/#traffic-routing
    #     - path: /
    #       pathType: Prefix
    #       backend:
    #         service:
    #           port:
    #             name: custom1 #http|grpc|websocket|healthcheck
    #     - path: /
    #       pathType: ImplementationSpecific
    #       backend:
    #         service:
    #           name: custom2
    #           port:
    #             number: 80
    #     - path: /
    #       pathType: ImplementationSpecific
    #       backend:
    #         service:
    #           name: ssl-redirect
    #           port:
    #             name: use-annotation
    #     - path: /
    #       pathType: Prefix
    #       backend:
    #         service:
    #           name: api-gateway
    #     - path: /
    #       pathType: ImplementationSpecific
  ## @param ingress.tls TLS setting of ingress
  tls: []

## @param resources Resource settings of microservice container
resources: {}
autoscaling:
  ## @param autoscaling.enabled enable autoscaling
  enabled: false
  ## @param autoscaling.minReplicas minimum replicas
  minReplicas: 1
  ## @param autoscaling.maxReplicas maximum replicas
  maxReplicas: 5
  ## @param autoscaling.targetCPUUtilizationPercentage target CPU utilization percentage
  targetCPUUtilizationPercentage: 75

## @param nodeSelector nodeSelector of pod
nodeSelector: {}
## @param tolerations tolerations of pod
tolerations: []
## @param affinity affinity of pod
affinity: {}

# used as env vars in the deployment
## @param configMapEnv values to be used as containers env vars
configMapEnv: {}
  # EXAMPLE
  # KEY: VALUE
  # ANOTHER_KEY: ANOTHER_VALUE

## @param secretEnv sensitive values to be used as containers env vars
secretEnv: {}
  # EXAMPLE
  # KEY: VALUE
  # ANOTHER_KEY: ANOTHER_VALUE

# @default -- See [`values.yaml`](values.yaml)
## @skip livenessProbe.enabled
## @skip livenessProbe.initialDelaySeconds
## @skip livenessProbe.periodSeconds
## @skip livenessProbe.path
## @skip livenessProbe.port
livenessProbe:
  enabled: false
  initialDelaySeconds: 10
  periodSeconds: 30
  path: /
  port: 8888

# @default -- See [`values.yaml`](values.yaml)
## @skip readinessProbe.enabled
## @skip readinessProbe.initialDelaySeconds
## @skip readinessProbe.periodSeconds
## @skip readinessProbe.path
## @skip readinessProbe.port
readinessProbe:
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 30
  path: /
  port: 8888

# @default -- See [`values.yaml`](values.yaml)
## @skip initContainers.enabled
## @skip initContainers.image.repository
## @skip initContainers.image.tag
## @skip initContainers.image.pullPolicy
## @skip initContainers.script
initContainers:
  enabled: false
  image:
    repository: postgres
    tag: 17-bookworm
    pullPolicy: Always
  script: |-
    #!/bin/sh
    set -e

    echo helloworld;

# @default -- See [`values.yaml`](values.yaml)
configMapVolume:
  ## @param configMapVolume.enabled Enable configMapVolume
  enabled: false
  # EXAMPLE
  # files:
  #   - name: file1.txt
  #     content: |
  #       This is the content of file1.
  #       It can span multiple lines.
  #   - name: file2.txt
  #     content: |
  #       This is the content of file2.
  #       It can also span multiple lines.
  # mountPath: /custom/path

# @default -- See [`values.yaml`](values.yaml)
secretVolume:
  ## @param secretVolume.enabled Enable secretVolume
  enabled: false
  # EXAMPLE
  # defaultMode: "0400"
  # files:
  #   - name: file1.txt
  #     content: |
  #       This is the content of file1.
  #       It can span multiple lines.
  #   - name: file2.txt
  #     content: |
  #       This is the content of file2.
  #       It can also span multiple lines.
  # mountPath: /custom/path

# @default -- See [`values.yaml`](values.yaml)
## @param volumes Custom mount paths for additional volumes
volumes: []
# EXAMPLE
# - name: volume1
#   emptyDir: {}
# - name: volume2
#   configMap:
#     name: my-configmap
# - name: volume3
#   secret:
#     secretName: my-secret

clusterRoleBinding:
  ## @param clusterRoleBinding.enabled Enable clusterRoleBinding
  enabled: false

clusterRole:
  ## @param clusterRole.enabled Enable clusterRole
  enabled: false
  # @default -- See [`values.yaml`](values.yaml)
  ## @skip clusterRole.rules
  rules:
  - apiGroups:
    - ""
    resources:
    - endpoints
    verbs:
    - get
    - watch

# @default -- See [`values.yaml`](values.yaml)
serviceMonitor:
  ## @param serviceMonitor.enabled Enable serviceMonitor
  enabled: false
  ## @param serviceMonitor.port name of the port used in service
  port: healthcheck
  ## @param serviceMonitor.path path of the metrics endpoint
  path: /metrics
  ## @param serviceMonitor.interval interval of the metrics scraping
  interval: 30s
  # Alternatively, you can use the following configuration to configure serviceMonitor:
  # targetPort: "8888"
  # path: /metrics
  # interval: 30s

networkPolicy:
  # @default -- See [`values.yaml`](values.yaml)
  ## @param networkPolicy.enabled Enable networkPolicy
  enabled: false
  # EXAMPLE
  #
  # policyTypes:
  # - Egress
  # - Ingress

  # ingress: []
  # - from:
  #   - ipBlock:
  #       cidr: 192.168.1.0/24  # Allow traffic from this IP block
  #   - namespaceSelector:
  #       matchLabels:
  #         kubernetes.io/metadata.name: your-namespace # Allow traffic from pods in namespaces with this label
  #   - podSelector:
  #       matchLabels:
  #         role: frontend  # Allow traffic from pods with this label
  #   ports:
  #   - protocol: TCP
  #     port: 80  # Allow TCP traffic on port 80
  #   - protocol: TCP
  #     port: 443  # Allow TCP traffic on port 443

  # egress:
  # - to:
  #   - ipBlock:
  #       cidr: 0.0.0.0/0  # Allow traffic to anywhere
  #       except:
  #       - 10.0.0.0/8  # Block access to internal network (example CIDRs)
  #       - 192.168.0.0/16
  #       - 172.16.0.0/12
  #   - namespaceSelector:
  #       matchLabels:
  #         kubernetes.io/metadata.name: your-namespace # Allow traffic to namespaces with this label
  #   - podSelector:
  #       matchLabels:
  #         role: external-service  # Allow traffic to pods with this label
  #   ports:
  #   - protocol: TCP
  #     port: 443  # Allow TCP traffic on port 443 (HTTPS)
